[build-system]
requires = ["hatchling", "hatch-vcs"]
build-backend = "hatchling.build"

[project]
name = "uuid-forge"
dynamic = ["version"]
description = "Deterministic UUID generation for cross-system coordination"
readme = "README.md"
requires-python = ">=3.11"
license = { text = "MIT" }
authors = [
    { name = "darth-veitcher", email = "1722315+darth-veitcher@users.noreply.github.com" }
]
keywords = [
    "uuid",
    "deterministic",
    "idempotent",
    "microservices",
    "distributed-systems",
    "coordination",
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: System :: Distributed Computing",
    "Typing :: Typed",
]

dependencies = [
    "rich>=14.1.0",
    "typer>=0.19.2",
]

[dependency-groups]
dev = [
    "black>=25.9.0",
    "mypy>=1.18.2",
    "nox>=2025.5.1",
    "pytest>=8.4.2",
    "pytest-asyncio>=1.2.0",
    "pytest-cov>=7.0.0",
    "ruff>=0.13.2",
]
docs = [
    "mike>=2.1.3",
    "mkdocs>=1.6.1",
    "mkdocs-material>=9.6.20",
    "mkdocstrings[python]>=0.30.1",
]
test = [
]

[project.scripts]
uuid-forge = "uuid_forge.cli:main"

[project.urls]
Homepage = "https://github.com/yourusername/uuid-forge"
Documentation = "https://yourusername.github.io/uuid-forge"
Repository = "https://github.com/yourusername/uuid-forge"
Issues = "https://github.com/yourusername/uuid-forge/issues"

[tool.hatch.version]
source = "vcs"
fallback-version = "0.1.0.dev0"

[tool.hatch.build.hooks.vcs]
version-file = "src/uuid_forge/_version.py"

[tool.hatch.build.targets.wheel]
packages = ["src/uuid_forge"]

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "-v",
    "--strict-markers",
    "--cov=uuid_forge",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
    "--cov-fail-under=80",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
]

[tool.coverage.run]
branch = true
source = ["uuid_forge"]
omit = [
    "*/tests/*",
    "*/__pycache__/*",
    "*/site-packages/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if __name__ == .__main__.:",
    "raise AssertionError",
    "raise NotImplementedError",
    "if TYPE_CHECKING:",
    "@abstractmethod",
    "@overload",
]

[tool.mypy]
python_version = "3.11"
strict = true
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
follow_imports = "normal"
ignore_missing_imports = false

[[tool.mypy.overrides]]
module = "tests.*"
disallow_untyped_defs = false
disallow_incomplete_defs = false

[tool.ruff]
target-version = "py311"
line-length = 100

[tool.ruff.lint]
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
    "ARG", # flake8-unused-arguments
    "SIM", # flake8-simplify
    "TCH", # flake8-type-checking
    "PTH", # flake8-use-pathlib
    "N",   # pep8-naming
    "D",   # pydocstyle
]
ignore = [
    "E501",  # line too long (handled by black)
    "D100",  # missing docstring in public module (we have module docstrings)
    "D104",  # missing docstring in public package
    "D203",  # 1 blank line required before class docstring (conflicts with D211)
    "D213",  # multi-line docstring summary should start at the second line (conflicts with D212)
]

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff.lint.per-file-ignores]
"tests/**/*.py" = [
    "D",      # no docstrings required in tests
    "ARG",    # unused arguments ok in tests (fixtures)
    "S101",   # assert allowed in tests
]
"src/uuid_forge/cli.py" = [
    "B008",   # typer.Option in function parameters is correct for typer
]
"src/uuid_forge/_version.py" = [
    "ALL",    # generated file, exclude from all linting
]

[tool.black]
line-length = 100
target-version = ['py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''
